#!/bin/bash

LIST_FILE="list"
NOTES_FILE="enc.notes"

FOLDER="${1}"

if [ "${1}" == "" ]; then
    echo "you need at least 1 param!";
    exit;
fi

if [ ! -d "${1}" ]; then
    echo "folder doesn't exist!";
    exit;
fi

cd "$FOLDER"

if [ ! -f "info.json" ]; then
    echo "info.json not found!";
    echo "run listgen first!"
    exit;
fi

J_FILE_Title=$( jq '.Title' info.json | colorfix.sh | sed 's/\"//g' )
J_FILE_imdbID=$( jq '.imdbID' info.json | colorfix.sh | sed 's/\"//g' )
J_FILE_Year=$( jq '.Year' info.json | colorfix.sh | sed 's/\"//g' )
J_FILE_Released=$( jq '.Released' info.json | colorfix.sh | sed 's/\"//g' )
J_FILE_Rating=$( jq '.imdbRating' info.json | colorfix.sh | sed 's/\"//g' )
J_FILE_Language=$( jq '.Language' info.json | colorfix.sh | sed 's/\"//g' )
J_ENC_Notes=$( jq '.Notes' info.json | colorfix.sh | sed 's/\"//g' )

if ! grep -q ${J_FILE_imdbID} "../${LIST_FILE}"; then
    echo "list doesn't contain movie!"
    echo "run listgen first!"
    exit;
fi

if [[ "${J_ENC_Notes}" != "null" ]] ; then
    echo ${J_ENC_Notes} | sed 's/\\n/\n/g' > ${NOTES_FILE}
fi

nano ${NOTES_FILE}

sed -i -e '$a\' ${NOTES_FILE}

J_ENC_Notes=$( cat ${NOTES_FILE} | sed ':a;N;s/\n/\\n/g' )

FILE_NAME=$( find . -type f -name "*.ogg" -o -name "*.avi" -o -name "*.flv" -o -name "*.mkv" -o -name "*.mp4" | head -n 1)
F_HEIGHT=$( exiftool -ImageHeight "${FILE_NAME}" | rev | cut -d ' ' -f1 | rev )
F_MODIFY=$( stat -c %y "${FILE_NAME}" | cut -d' ' -f1 )

if ! [[ $F_HEIGHT =~ $re ]] ; then
    M_RES="null"
else
    if (($F_HEIGHT>=1 && $F_HEIGHT<=240))
    then
        M_RES="240p"
    elif (($F_HEIGHT>=241 && $F_HEIGHT<=369))
    then
        M_RES="360p"
    elif (($F_HEIGHT>=371 && $F_HEIGHT<=479))
    then
        M_RES="480p"
    elif (($F_HEIGHT>=480 && $F_HEIGHT<=760))
    then
        M_RES="720p"
    elif (($F_HEIGHT>=761 && $F_HEIGHT<=1200))
    then
        M_RES="1080p"
    fi
fi

ERR_FL=0;
if [[ "${J_FILE_Title}" == "null" ]] ; then
    ERR_FL=1;
elif [[ "${J_FILE_imdbID}" == "null" ]] ; then
    ERR_FL=1;
elif [[ "${J_FILE_Year}" == "null" ]] ; then
    ERR_FL=1;
elif [[ "${J_FILE_Released}" == "null" ]] ; then
    ERR_FL=1;
elif [[ "${J_FILE_Released}" == "N/A" ]] ; then
    J_FILE_Released=${J_FILE_Year}
elif [[ "${M_RES}" == "null" ]] ; then
    ERR_FL=1;
elif [[ "${J_FILE_Rating}" == "null" ]] ; then
    ERR_FL=1;
elif [[ "${J_FILE_Language}" == "null" ]] ; then
    ERR_FL=1;
elif [[ "${J_FILE_Language}" == "N/A" ]] ; then
    J_FILE_Language="English"
elif [[ "${F_MODIFY}" == "null" ]] ; then
    ERR_FL=1;
fi

if [[ $(echo "${J_FILE_Released}" | grep -E "^([0-9]{2})\s([a-zA-Z]{3})\s([0-9]{4})$") ]]; then
    J_FILE_Released=$( date -d "${J_FILE_Released}" +'%Y-%m-%d' );
fi

cd ".."

J_ENC_Notes_new=$( echo ${J_ENC_Notes} | sed 's/\\/\\\\/g' )

if ((${ERR_FL}==1)) ; then
    echo "something wrong with ${FOLDER}. Please fixup with an info.json!"
    echo ${FOLDER} >> ${ERR_LIST_FILE}
else
    STR_REPLACE=$( echo ${J_FILE_Title}\|${J_FILE_imdbID}\|${J_FILE_Released}\|${M_RES}\|${J_FILE_Rating}\|${J_FILE_Language}\|${F_MODIFY}\|${J_ENC_Notes_new} )
    sed -i "/.*${J_FILE_imdbID}/c\\${STR_REPLACE}" ${LIST_FILE}
    echo "{
\"Title\":\"${J_FILE_Title}\",
\"Year\":\"${J_FILE_Year}\",
\"imdbID\":\"${J_FILE_imdbID}\",
\"Released\":\"${J_FILE_Released}\",
\"imdbRating\":\"${J_FILE_Rating}\",
\"Language\":\"${J_FILE_Language}\",
\"Notes\":\"${J_ENC_Notes}\"
}" > "${FOLDER}/info.json"
fi

rm ${FOLDER}/${NOTES_FILE}
